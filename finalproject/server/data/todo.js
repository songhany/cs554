const mongoCollections = require('../config/mongoCollections');
const users = mongoCollections.users;
let usersJS = require('./users');  // we need use async method of users ‚ù§add todo to user

let { ObjectId } = require('mongodb');


module.exports = {

  getAllTodosOfUser: async function(userId) {
    if (!userId) throw 'You must provide an userId to get';
    if (typeof userId !== 'string' || userId.length === 0) throw "userId must be string type and not an empty string";
    let parsedUserId = userId;
    const userCollection = await users();

    const currentUser = await userCollection.findOne({ _id: parsedUserId });
    return currentUser.todos;
  },

  createTodo: async function(userId, todoId, text, day, reminder) {  //userId is string
    if (text == " " || day == " ") throw "Strings with empty spaces are NOT valid strings";
    // if (!userId || !text || !day) throw "All fields must have valid values"
    // if (typeof text !== 'string' || typeof day !== 'string') throw 'The text, day must be string type';
    // if (text.length === 0) throw "The text cannot be empty strings";
    let parsedUserId = userId; 
    const userCollection = await users();

    const newTodo = {
      _id: todoId,  //! todoId generated by react client side in './src/components/Todo.js'. I have to guarantee id is same, otherwise I cannot delete
      text: text,
      day: day,
      reminder: reminder,  // boolean
    };
    const currentUser = await userCollection.updateOne({ _id: parsedUserId }, { $addToSet: { todos: newTodo}});  //! add todo to user

    // console.log(currentUser);
    // console.log(usersJS.getBookByBookId(userId));
    return usersJS.getUserById(userId);
  },

  getTodoByTodoId: async function(todoId) {
    if (!todoId) throw 'You must provide an todoId to get';
    if (typeof todoId !== 'string' || todoId.length === 0) throw "the todoId must be string type and not an empty string";
    const userCollection = await users();

    let retTodo =  {};
    let tarUserObj = await userCollection.findOne({ 'todos._id': todoId});  // https://stackoverflow.com/questions/14040562/how-to-search-in-array-of-object-in-mongodb
    let todoList = tarUserObj['todos'];
    
    for (let todo of todoList) {
      if (todo['_id'].toString() === todoId.toString())
        retTodo = todo;
    }
    if (!retTodo) throw "Cannot find todo with that todoId"

    return retTodo;  // https://stackoverflow.com/questions/49508700/convert-mongodb-object-to-javascript-object
  },

  toggleTodo: async function(todoId) {
    if (!todoId) throw "You must provide an todoId for removing";
    // if (typeof todoId !== "string" || todoId.length === 0)
    //   throw "the todoId must be string type and not an empty string";
    // if (!editedTodo) throw "You must provide an editedTodo";
    // if (editedTodo.constructor !== Object)
    //   throw "the editedTodo must be an object";
    // if (Object.entries(editedTodo).length === 0 && editedTodo.constructor === Object)
    //   throw "editedTodo Object cannot be an empty object";

    let toggleReminderTodo = {};

    // let parsedTodoId = todoId;
    const userCollection = await users();
    let tarUserObj = await userCollection.findOne({ 'todos._id': todoId });
    userId = tarUserObj._id;  // userId is not ObjectId. It's currentUser.uid in firebase. I get it with 'const {currentUser}  = useAuth()' in react client side
    let todoList = tarUserObj['todos'];

    for (let todo of todoList) {
      if (todo['_id'].toString() === todoId.toString()) {
        todo['reminder'] = !todo['reminder'];  // toggle reminder
        toggleReminderTodo = todo;
      }
    }

    let toggledUserObj = await userCollection.updateOne({ 'todos._id' : todoId }, { $set: { 'reminder' : toggleReminderTodo.reminder }});
    return toggledUserObj;
  },

  deleteTodo: async function(todoId) {
    if (!todoId) throw 'You must provide an todoId for removing';
    if (typeof todoId !== 'string' || todoId.length === 0) throw "The todoId must be string type and not an empty string";
    const userCollection = await users();

    // find target Book Obj, get userId
    let tarUserObj = await userCollection.findOne({ 'todos._id': todoId });
    userId = tarUserObj._id;  // userId is not ObjectId. It's currentUser.uid in firebase. I get it with 'const {currentUser}  = useAuth()' in react client side

    let delUserObj = await userCollection.updateOne({ '_id': userId }, { $pull: { todos: {_id : todoId }}})

    return delUserObj;
  },
};

