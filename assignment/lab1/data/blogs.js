const mongoCollections = require('../config/mongoCollections');
const blogs = mongoCollections.blogs;  //create and get the blogCollection

let ObjectID = require('mongodb').ObjectID;  // MongoDB Node check if objectid is valid. https://stackoverflow.com/questions/11985228/mongodb-node-check-if-objectid-is-valid
let { ObjectId } = require('mongodb');


module.exports = {

  getAllBlogs: async function (sk = 0, ta = 20) {
    if (sk < 0 || ta < 0) throw "query string parameters for skip and take (they should be positive numbers)";
    if (ta > 100) {
      ta = 100;  // the route will show up to 20 blog posts; at most, it will show 100 blog posts.
    }
    const blogCollection = await blogs();
    const arrOfBlogs = await blogCollection.find({}).skip(sk).limit(ta).toArray();

    //convert ObjectId to String for every array element
    for (let b of arrOfBlogs) {
      b._id = b._id.toString();
    }
    return arrOfBlogs; //an array of object
  },

  getBlogByBlogId: async function (blogId) {
    if (!blogId) throw 'You must provide an blogId to get';
    if (typeof blogId !== 'string' || blogId.length === 0) throw "for getBookByblogId(blogId), the blogId must be string type and not an empty string";
    if (!ObjectID.isValid(blogId)) throw "the blogId provided is not a valid ObjectId";  //MongoDB Node check if objectid is valid. https://stackoverflow.com/questions/11985228/mongodb-node-check-if-objectid-is-valid
    let parsedId = ObjectId(blogId);

    const blogCollection = await blogs();
    let blog = await blogCollection.findOne({ _id: parsedId });
    if (blog === null) throw "No blog found with that blogId";

    blog._id = blog._id.toString();
    return blog;  // blog object
  },


  createBlog: async function (title, body, userThatPosted, comments) {
    if (title == " " || body == " ") throw "Strings with empty spaces are NOT valid strings";
    if (!title || !body) throw "All fields need to have valid values";
    if (typeof title !== 'string' || typeof body !== 'string') throw "title, body must be string type";
    if (userThatPosted.constructor !== Object) throw "userThatPosted must be an Object"

    if (!Array.isArray(comments)) {  //❤ comments don't supply, initialize it to an empty array
      comments = [];
    }

    const blogCollection = await blogs();
    const newBlog = {
      title: title,  // string
      body: body,  // string
      userThatPosted: userThatPosted,  // object
      comments: comments  // list of objects
    };

    const insertBlog = await blogCollection.insertOne(newBlog);
    if (insertBlog.insertedCount === 0) throw "Cannot add blog into blogCollection of Database";

    let blogId = insertBlog.insertedId;  // blogId is an ObjectId that was generated by MongoDB
    blogId = blogId.toString();

    return await this.getBlogByBlogId(blogId);
  },


  deleteBlog: async function (blogId) {
    if (!blogId) throw "Must provide an blogId for deleting blog";
    if (typeof blogId !== 'string' || blogId.length === 0) throw "blogId must be string type and not an empty string";
    if (!ObjectID.isValid(blogId)) throw "blogId provided is not a valid blogId";
    let parsedId = ObjectId(blogId);

    const blogCollection = await blogs();
    const deleteBlog = await blogCollection.deleteOne({ _id: parsedId });
    if (deleteBlog.deletedCount === 0) {
      throw "Cannot delete blog with blogId";
    }
    return { "blogId": blogId, "deleted": true };
  },


  replaceBlog: async function (blogId, newBlog) {  // blogId is string
    if (!blogId) throw 'You must provide an blogId for removing';
    if (typeof blogId !== 'string' || blogId.length === 0) throw "the blogId must be string type and not an empty string";
    if (!ObjectID.isValid(blogId)) throw "the blogId provided is not a valid ObjectId";
    if (!newBlog.title) throw "You must provide title";
    if (!newBlog.body) throw "You must provide body";
    if (typeof newBlog.title !== 'string' || newBlog.title.length === 0) throw "the title must be string type and not an empty string";
    if (typeof newBlog.body !== 'string' || newBlog.body.length === 0) throw "the body must be string type and not an empty string";

    const updatedBlogData = {};
    if (newBlog.title) updatedBlogData.title = newBlog.title;
    if (newBlog.body) updatedBlogData.body = newBlog.body;

    let parsedId = ObjectId(blogId);
    const blogCollection = await blogs();
    const currentBlog = await blogCollection.findOne({ _id: parsedId });
    updatedBlogData.userThatPosted = newBlog.userThatPosted;  // userThatPosted don't change, even if you modify blog
    updatedBlogData.comments = currentBlog.comments  // ❤ Note:  you cannot manipulate comments in this route! 

    return await blogCollection.replaceOne({ _id: parsedId }, updatedBlogData)
      .then(function () {
        return module.exports.getBlogByBlogId(blogId);  // module.exports.getBlogByBlogId(blogId)
      })
  },


  updateBlog: async function (blogId, newBlog) {
    if (!blogId) throw 'You must provide an blogId for removing';
    if (typeof blogId !== 'string' || blogId.length === 0) throw "the blogId must be string type and not an empty string";
    if (!ObjectID.isValid(blogId)) throw "the blogId provided is not a valid ObjectId";
    if (!newBlog) throw 'You must provide an newBlog';
    if (newBlog.constructor !== Object) throw "the newBlog must be an object";
    if (Object.entries(newBlog).length === 0 && newBlog.constructor === Object) throw "newBlog Object cannot be an empty object";

    const updatedBlogData = {};
    if (newBlog.title) updatedBlogData.title = newBlog.title;
    if (newBlog.body) updatedBlogData.body = newBlog.body;

    let parsedId = ObjectId(blogId);
    const blogCollection = await blogs();
    const currentBlog = await blogCollection.findOne({ _id: parsedId });
    updatedBlogData.userThatPosted = currentBlog.userThatPosted;  // store original userThatPosted
    updatedBlogData.comments = currentBlog.comments  // ❤ Note:  you cannot manipulate comments in this route! 

    return await blogCollection.updateOne({ _id: parsedId }, { $set: updatedBlogData })
      .then(function () {
        return module.exports.getBlogByBlogId(blogId);
      })
  },
};